/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: chatapp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export class ChatMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        user?: string;
        message?: string;
        timestamp?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get user() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set user(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: number;
        user?: string;
        message?: string;
        timestamp?: number;
    }): ChatMessage {
        const message = new ChatMessage({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.user != null) {
            message.user = data.user;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            user?: string;
            message?: string;
            timestamp?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.user != null) {
            data.user = this.user;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.timestamp != null) {
            data.timestamp = this.timestamp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.user.length)
            writer.writeString(2, this.user);
        if (this.message.length)
            writer.writeString(3, this.message);
        if (this.timestamp != 0)
            writer.writeInt64(4, this.timestamp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.user = reader.readString();
                    break;
                case 3:
                    message.message = reader.readString();
                    break;
                case 4:
                    message.timestamp = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatMessage {
        return ChatMessage.deserialize(bytes);
    }
}
export class ChatHistory extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        messages?: ChatMessage[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("messages" in data && data.messages != undefined) {
                this.messages = data.messages;
            }
        }
    }
    get messages() {
        return pb_1.Message.getRepeatedWrapperField(this, ChatMessage, 1) as ChatMessage[];
    }
    set messages(value: ChatMessage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        messages?: ReturnType<typeof ChatMessage.prototype.toObject>[];
    }): ChatHistory {
        const message = new ChatHistory({});
        if (data.messages != null) {
            message.messages = data.messages.map(item => ChatMessage.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            messages?: ReturnType<typeof ChatMessage.prototype.toObject>[];
        } = {};
        if (this.messages != null) {
            data.messages = this.messages.map((item: ChatMessage) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.messages.length)
            writer.writeRepeatedMessage(1, this.messages, (item: ChatMessage) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatHistory {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatHistory();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ChatMessage.deserialize(reader), ChatMessage));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatHistory {
        return ChatHistory.deserialize(bytes);
    }
}
export abstract class UnimplementedChatServiceService {
    static definition = {
        SendMessage: {
            path: "/chatapp.ChatService/SendMessage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ChatMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ChatMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ChatMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ChatMessage.deserialize(new Uint8Array(bytes))
        },
        GetChatHistory: {
            path: "/chatapp.ChatService/GetChatHistory",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ChatHistory) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ChatHistory.deserialize(new Uint8Array(bytes))
        },
        StreamMessages: {
            path: "/chatapp.ChatService/StreamMessages",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: dependency_1.Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ChatMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ChatMessage.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SendMessage(call: grpc_1.ServerUnaryCall<ChatMessage, ChatMessage>, callback: grpc_1.sendUnaryData<ChatMessage>): void;
    abstract GetChatHistory(call: grpc_1.ServerUnaryCall<dependency_1.Empty, ChatHistory>, callback: grpc_1.sendUnaryData<ChatHistory>): void;
    abstract StreamMessages(call: grpc_1.ServerWritableStream<dependency_1.Empty, ChatMessage>): void;
}
export class ChatServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static SendMessage = new grpc_web_1.MethodDescriptor<ChatMessage, ChatMessage>("/chatapp.ChatService/SendMessage", grpc_web_1.MethodType.UNARY, ChatMessage, ChatMessage, (message: ChatMessage) => message.serialize(), ChatMessage.deserialize);
    SendMessage(message: ChatMessage, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ChatMessage, ChatMessage>(this._address + "/chatapp.ChatService/SendMessage", message, metadata || {}, ChatServiceClient.SendMessage);
    }
    private static GetChatHistory = new grpc_web_1.MethodDescriptor<dependency_1.Empty, ChatHistory>("/chatapp.ChatService/GetChatHistory", grpc_web_1.MethodType.UNARY, dependency_1.Empty, ChatHistory, (message: dependency_1.Empty) => message.serialize(), ChatHistory.deserialize);
    GetChatHistory(message: dependency_1.Empty, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<dependency_1.Empty, ChatHistory>(this._address + "/chatapp.ChatService/GetChatHistory", message, metadata || {}, ChatServiceClient.GetChatHistory);
    }
    private static StreamMessages = new grpc_web_1.MethodDescriptor<dependency_1.Empty, ChatMessage>("/chatapp.ChatService/StreamMessages", grpc_web_1.MethodType.SERVER_STREAMING, dependency_1.Empty, ChatMessage, (message: dependency_1.Empty) => message.serialize(), ChatMessage.deserialize);
    StreamMessages(message: dependency_1.Empty, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/chatapp.ChatService/StreamMessages", message, metadata || {}, ChatServiceClient.StreamMessages);
    }
}
